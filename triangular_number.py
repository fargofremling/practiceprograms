# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th
#  triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
# 
# The number to solve this problem must be greater than 500 + all the prime numbers up to
# 500 (at least). So the minimum starting point is likely at least 550.


# def add(x, y):
#     return x + y
# 
# sum = reduce(add, numbers_to_add)
import math

b = 3

print b
# reference: http://stackoverflow.com/questions/6800193/what-is-the-most-efficient-way-of-finding-all-the-factors-of-a-number-in-python
def factors(b):
    factor_list = [1]
    c = 2
    while len(factor_list) != 10:
        for x in range (1, b):
            if b % x == 0:
                factor_list.append(x)
                print len(factor_list)
        b = c + 1
        c += 1
        print "B =", b
            
        
    # return set(reduce(list.__add__, 
#                 ([i, n/i] for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)))
factors(b) 

# Formula for triangular numbers: b = n(n+1)/2
# b * 2 = n(n+1)
# 

